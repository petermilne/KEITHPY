#!/usr/bin/python

import sys;import time;import csv;import scipy
import numpy as np
import epics;from epics import caget, caput
import keith_func
import global_uut_settings

uut = global_uut_settings.uut
ai_site = global_uut_settings.ai_site
ao_site = global_uut_settings.ao_site

print sys.argv[0]
#print sys.argv[1]

nchan = 4

############ Begin setting AO voltages and reading back from Keithley #########
''' Serves as block comment
keith_func.set_AO_all(5,4)
Vall = keith_func.getKVolts_all(32)
print Vall

keith_func.set_AO_all(3,4)
Vall = keith_func.getKVolts_all(32)
print Vall
'''

############ Set output filename and open for CSV writing #########
timestamp = time.strftime("%Y%m%d_%H%M")
filename = "./results/results_"+timestamp+".csv"
result_file = open(filename,'wb')
csv_write = csv.writer(result_file)
#Create header for CSV
channel_header  = ['CH{0:0>2}'.format(i) for i in range(1, nchan+1)]
channel_header.append('Req. Voltage')
channel_header.append('DAC Code')
csv_write.writerow(channel_header)


############ Individual voltage per CH stored in list of lists ############
results_array = []      # Initialise array to store results
voltages = range(-10,11)   # Specify voltages to loop through

keith_func.set_TRG(0) # Turn off trigger requirement for AO change after SPAN set
keith_func.set_SPAN_all(3) # Set SPAN to Bipolar 5V
time.sleep(2)

start = time.time()
v1 = []
for i in range (0,10):
    v1.append(keith_func.getDacCode(1))

print v1
avg_str = str(scipy.mean(v1))
print "avg = "+avg_str
# int throws away the redundant decimal part, this is more accurate than a modulus operation
rnd_str = str(int(np.round(scipy.mean(v1),0)))
print "Rnd avg = "+rnd_str
end = time.time()
print end - start

#for i in range (0, len(voltages)):
#    results_array.append([])   # Add another sublist to master list
#    
#    for channel in range (1,nchan+1):
#        keith_func.set_AO(voltages[i],channel)   # Set AO on current channel
#       
#        v = keith_func.getKVolts(channel,nchan) # Get recorded voltage from KMUX
#        results_array[i].append(v) # Append recorded voltage to sublist
#
#        # Record DAC Code
#        if channel == nchan: results_array[i].append(keith_func.getDacCode(channel))
#
#        keith_func.set_AO_all(0,nchan)
#
#    # Add requested voltage to sublist, in 2nd to last position
#    results_array[i].insert(len(results_array[i])-1,voltages[i])
#
#    csv_write.writerow(results_array[i])  # Write to CSV, format as below
#
#    # Some feedback for long run
#    v_str = str(voltages[i]); feedback_str = " "+v_str+"V Scan Complete "
#    print '\n{0:-^30}'.format(feedback_str)


# Format of CSV generated by above
#  CH01,  CH02,  CH03,  CH04, Req V, DAC Code
# 0.047, -0.02,  0.03, 0.037,   0  ,   0
# 1.047, -0.02,  0.02, 0.030,   1  , 13107
